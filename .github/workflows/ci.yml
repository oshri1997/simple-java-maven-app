name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set new version
        id: set-version
        run: |
          # Extract version from pom.xml
          version=$(cat pom.xml | grep -oPm1 "(?<=<version>)[^<]+")
          new_version=$(echo $version | awk -F. '{printf "%d.%d.%d", $1, $2, $3+1}')
          echo "New version: $new_version"
          echo "::set-output name=version::$new_version"

  build-docker:
    needs: set-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker image
        run: |
          echo "Building Docker image with version: ${{ needs.set-version.outputs.version }}"
          docker build -t oshri1997/my-app:${{ needs.set-version.outputs.version }} .
          docker tag oshri1997/my-app:${{ needs.set-version.outputs.version }} oshri1997/my-app:latest

      - name: Push Docker image to Docker Hub
        run: |
          echo "Pushing Docker image with version: ${{ needs.set-version.outputs.version }}"
          docker push oshri1997/my-app:${{ needs.set-version.outputs.version }}
          docker push oshri1997/my-app:latest

  deploy-to-ec2:
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
            host: 3.75.199.206
            username: ubuntu
            key: ${{ secrets.EC2_SSH_KEY }}
            port: 22
            script: |
              echo "Deploying version: ${{ needs.set-version.outputs.version }}"
              # Update system packages
              sudo apt update -y
              sudo apt upgrade -y

              # Install Docker if not installed
              if ! [ -x "$(command -v docker)" ]; then
                  sudo apt install -y docker.io
                  sudo systemctl start docker
                  sudo systemctl enable docker
              fi

              # Pull and run the Docker image
              sudo docker system prune -a -f
              sudo docker pull oshri1997/my-app:${{ needs.set-version.outputs.version }}
              sudo docker run --rm -d oshri1997/my-app:${{ needs.set-version.outputs.version }}
